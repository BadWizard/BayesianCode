clear;

% Demonstration code for ETS on exporting figures with matlab
% See  demoFigs.pdf for the output in a pdf generated by latex

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Toy data

t = linspace(0,20,1000);
s1 = sin(t+pi/3);
s2 = sin(t);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Version 1: Basic plot that we'll successively improve

figure

subplot(1,2,1)
plot(t,s1,'-')
ylabel('y')
xlabel('\omega = 2 \pi c/\lambda')

subplot(1,2,2)
plot(t,s2,'-')
xlabel('\omega = 2 \pi c/\lambda')

% This can now be exported by hand using the matlab figure menu

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Version 2: Automating exporting using print

figure

subplot(1,2,1)
plot(t,s1,'-')
ylabel('y')
xlabel('\omega = 2 \pi c/\lambda')

subplot(1,2,2)
plot(t,s2,'-')
xlabel('\omega = 2 \pi c/\lambda')

filename = 'demo2.eps';
print(gcf,'-depsc',filename);

% The bang command '!' steps out of matlab into the OS and, here,
% calls linux commands. You may well need to alter this for your system. 
! epstopdf demo2.eps 
! acroread demo2.pdf&

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Version 3: Specify paper size so the eps/pdf is of a desired size

figure

subplot(1,2,1)
plot(t,s1,'-')
ylabel('y')
xlabel('\omega = 2 \pi c/\lambda')

subplot(1,2,2)
plot(t,s2,'-')
xlabel('\omega = 2 \pi c/\lambda')

PS = [14,10]; % paper size (in centimeters)
PP = [0,0,PS]; % paper position on the printed page (in centimeters)

set(gcf,'paperpositionmode','manual','paperposition', ...
        PP,'papersize',PS, 'paperunits','centimeters');

filename = 'demo3.eps';
print(gcf,'-depsc',filename,'-painters','-loose'); % loose option stops matlab
                                                   % cropping white space
                                                   % automatically
! epstopdf demo3.eps
! acroread demo3.pdf&

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Version 4: Better positioned axes with less white space

left = 0.12;  % space on LHS of figure, normalised units
right = 0.02; % space on RHS of figure
top = 0.05;   % space above figure
bottom = 0.1; % space below figure
hspace = 0.07;% horizontal space between axes

height = (1-top-bottom); % height of axis
width = (1-left-right-hspace)/2; % width of axis

across = [hspace+width,0,0,0];
pos1 = [left,1-top-height,width,height]; % position of axis
pos2 = pos1+across;

figure

ax1 = axes('position',pos1); % produce axis replaces subplot(1,2,1)
plot(t,s1,'-')
ylabel('y')
xlabel('\omega = 2 \pi c/\lambda')

ax2 = axes('position',pos2); % produce second axis replace subplot(1,2,2)
plot(t,s2,'-')
xlabel('\omega = 2 \pi c/\lambda')

PS = [14,10]; % paper size (in centimeters)
PP = [0,0,PS]; % paper position on the printed page (in centimeters)

set(gcf,'paperpositionmode','manual','paperposition', ...
        PP,'papersize',PS, 'paperunits','centimeters');

filename = 'demo4.eps';
print(gcf,'-depsc',filename,'-painters','-loose'); % loose option stops matlab
						   % cropping white space
                                                   % automatically

! epstopdf demo4.eps
! acroread demo4.pdf&

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Version 5: Adding parameters to control font sizes and linewidths etc.

% Fonts
FontName = 'Times';
FSsm = 7; % small font size
FSmed = 10; % medium font size

% Line widths
LWthin = 1; % thin lines

% Colors
col1 = [0,0,1];

% Axis position
left = 0.12;  % space on LHS of figure, normalised units
right = 0.02; % space on RHS of figure
top = 0.05;   % space above figure
bottom = 0.1; % space below figure
hspace = 0.07;% horizontal space between axes

height = (1-top-bottom); % height of axis
width = (1-left-right-hspace)/2; % width of axis

across = [hspace+width,0,0,0];
pos1 = [left,1-top-height,width,height]; % position of axis
pos2 = pos1+across;

figure

ax1 = axes('position',pos1); % produce axis replaces subplot(1,2,1)
plot(t,s1,'-','linewidth',LWthin)
ylabel('y','fontname',FontName,'FontSize',FSmed)
xlabel('\omega = 2 \pi c/\lambda','fontname',FontName,'FontSize',FSmed)
set(ax1,'FontName',FontName,'FontSize',FSsm)

ax2 = axes('position',pos2); % produce second axis replace subplot(1,2,2)
plot(t,s2,'-','linewidth',LWthin)
xlabel('\omega = 2 \pi c/\lambda','fontname',FontName,'FontSize',FSmed)
set(ax2,'FontName',FontName,'FontSize',FSsm)

PS = [14,10]; % paper size (in centimeters)
PP = [0,0,PS]; % paper position on the printed page (in centimeters)

set(gcf,'paperpositionmode','manual','paperposition', ...
        PP,'papersize',PS, 'paperunits','centimeters');

filename = 'demo5.eps';
print(gcf,'-depsc',filename,'-painters','-loose'); % loose option stops matlab
						   % cropping white space
                                                   % automatically

! epstopdf demo5.eps
! acroread demo5.pdf&

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Version 6: Output for PSFRAG - replaces the second xlabel by a
%  simpler label so it can be replaced by psfrag

% Fonts
FontName = 'Times';
FSsm = 7; % small font size
FSmed = 10; % medium font size

% Line widths
LWthin = 1; % thin lines

% Colors
col1 = [0,0,1];

% Axis position
left = 0.12;  % space on LHS of figure, normalised units
right = 0.02; % space on RHS of figure
top = 0.05;   % space above figure
bottom = 0.1; % space below figure
hspace = 0.07;% horizontal space between axes

height = (1-top-bottom); % height of axis
width = (1-left-right-hspace)/2; % width of axis

across = [hspace+width,0,0,0];
pos1 = [left,1-top-height,width,height]; % position of axis
pos2 = pos1+across;

figure

ax1 = axes('position',pos1); % produce axis replaces subplot(1,2,1)
plot(t,s1,'-','linewidth',LWthin)
ylabel('y','fontname',FontName,'FontSize',FSmed)
xlabel('\omega = 2 \pi c/\lambda','fontname',FontName,'FontSize',FSmed)
set(ax1,'FontName',FontName,'FontSize',FSsm)

ax2 = axes('position',pos2); % produce second axis replace subplot(1,2,2)
plot(t,s2,'-','linewidth',LWthin)
xlabel('omega = 2 pi c/lambda','fontname',FontName,'FontSize',FSmed)
set(ax2,'FontName',FontName,'FontSize',FSsm)

PS = [14,10]; % paper size (in centimeters)
PP = [0,0,PS]; % paper position on the printed page (in centimeters)

set(gcf,'paperpositionmode','manual','paperposition', ...
        PP,'papersize',PS, 'paperunits','centimeters');

filename = 'demo6.eps';
print(gcf,'-depsc',filename,'-painters','-loose'); % loose option stops matlab
						   % cropping white space
                                                   % automatically

! epstopdf demo6.eps
! acroread demo6.pdf&

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Version 7: Using my code. I take the one of my "shell" functions
%% (where shell means "partially written") and modify relevent
%% parameters, like the font sizes or paper size, and then add lines
%% plotting the varibles. I like this method because it makes
%% everything explicit and it is easy to tweak things.

filename = 'demo7';
Plot1By2Demo(t,s1,s2,filename)

! epstopdf demo7.eps
! acroread demo7.pdf&
