classdef TestModelSevenState_13Param_QET < matlab.unittest.TestCase
    properties
        model
        params
        data
    end
    
    methods (TestClassSetup)
        function createExperiment(testCase)
            
            testCase.model = SevenState_13Param_QET();
            testCase.params=[1500,50000,13000,50,15000,10,6000,100000000,5000,100000000,6000,5000,100000000]';
            testCase.data.tres = 0.000025;
            testCase.data.concs = 1;
            testCase.data.tcrit = 0.004;
            [testCase.data.bursts,~] = load_data(strcat(getenv('P_HOME'), {'/Samples/Simulations/two_state_20000.scn'}),testCase.data.tres,testCase.data.tcrit);
            testCase.data.useChs=1;
        end
    end
    
    methods(Test)
        function testProperties(testCase)
            
            %check defaults
            testCase.verifyEqual(testCase.model.kA,3);
            testCase.verifyEqual(testCase.model.h,0.01);
            testCase.verifyEqual(testCase.model.k,13);
            
            %check non-accessibilty
            try
                testCase.model.kA=3;
            catch ME
                testCase.verifyEqual(ME.identifier,'MATLAB:class:SetProhibited');                
            end

            try
                testCase.model.k=4;
            catch ME
                testCase.verifyEqual(ME.identifier,'MATLAB:class:SetProhibited');                
            end
            
            %check accessibilty
            testCase.model.h=0.1;
            testCase.verifyEqual(testCase.model.h,0.1);
            testCase.model.h=0.01;
            testCase.verifyEqual(testCase.model.h,0.01);
        end
        
        %test Q generation
        function testQ(testCase)
            Q=testCase.model.generateQ(testCase.params,1);
            %from 2003 
            testCaseQ=[-1500.0000000000 0.0000000000 0.0000000000 50000.0000000000 0.0000000000 0.0000000000 0.0000000000 0.0000000000 -13000.0000000000 0.0000000000 0.0000000000 50.0000000000 0.0000000000 0.0000000000 0.0000000000 0.0000000000 -15000.0000000000 0.0000000000 0.0000000000 10.0000000000 0.0000000000 1500.0000000000 0.0000000000 0.0000000000 -61000.0000000000 100000000.0000000000 100000000.0000000000 0.0000000000 0.0000000000 13000.0000000000 0.0000000000 5000.0000000000 -100006050.0000000000 0.0000000000 100000000.0000000000 0.0000000000 0.0000000000 15000.0000000000 6000.0000000000 0.0000000000 -100005010.0000000000 100000000.0000000000 0.0000000000 0.0000000000 0.0000000000 0.0000000000 6000.0000000000 5000.0000000000 -200000000.0000000000 ]';
            testCase.verifyEqual(Q(:),testCaseQ,'AbsTol', 1e-10);
            
            Q=testCase.model.generateQ(testCase.params,0.01);
            testCaseQ=[-1500.0000000000 0.0000000000 0.0000000000 50000.0000000000 0.0000000000 0.0000000000 0.0000000000 0.0000000000 -13000.0000000000 0.0000000000 0.0000000000 50.0000000000 0.0000000000 0.0000000000 0.0000000000 0.0000000000 -15000.0000000000 0.0000000000 0.0000000000 10.0000000000 0.0000000000 1500.0000000000 0.0000000000 0.0000000000 -61000.0000000000 1000000.0000000000 1000000.0000000000 0.0000000000 0.0000000000 13000.0000000000 0.0000000000 5000.0000000000 -1006050.0000000000 0.0000000000 1000000.0000000000 0.0000000000 0.0000000000 15000.0000000000 6000.0000000000 0.0000000000 -1005010.0000000000 1000000.0000000000 0.0000000000 0.0000000000 0.0000000000 0.0000000000 6000.0000000000 5000.0000000000 -2000000.0000000000 ]';
            testCase.verifyEqual(Q(:),testCaseQ,'AbsTol', 1e-10);
            
            Q=testCase.model.generateQ(testCase.params,0.00001);
            testCaseQ=[-1500.0000000000 0.0000000000 0.0000000000 50000.0000000000 0.0000000000 0.0000000000 0.0000000000 0.0000000000 -13000.0000000000 0.0000000000 0.0000000000 50.0000000000 0.0000000000 0.0000000000 0.0000000000 0.0000000000 -15000.0000000000 0.0000000000 0.0000000000 10.0000000000 0.0000000000 1500.0000000000 0.0000000000 0.0000000000 -61000.0000000000 1000.0000000000 1000.0000000000 0.0000000000 0.0000000000 13000.0000000000 0.0000000000 5000.0000000000 -7050.0000000000 0.0000000000 1000.0000000000 0.0000000000 0.0000000000 15000.0000000000 6000.0000000000 0.0000000000 -6010.0000000000 1000.0000000000 0.0000000000 0.0000000000 0.0000000000 0.0000000000 6000.0000000000 5000.0000000000 -2000.0000000000 ]';
            testCase.verifyEqual(Q(:),testCaseQ,'AbsTol', 1e-10);
            
            params2=[15000,5000,13050,40,13000,1,600,10000000,7000,200000000,4000,2000,300000000];
            Q=testCase.model.generateQ(params2,0.00001);
            testCaseQ=[-15000.0000000000 0.0000000000 0.0000000000 5000.0000000000 0.0000000000 0.0000000000 0.0000000000 0.0000000000 -13050.0000000000 0.0000000000 0.0000000000 40.0000000000 0.0000000000 0.0000000000 0.0000000000 0.0000000000 -13000.0000000000 0.0000000000 0.0000000000 1.0000000000 0.0000000000 15000.0000000000 0.0000000000 0.0000000000 -12600.0000000000 2000.0000000000 100.0000000000 0.0000000000 0.0000000000 13050.0000000000 0.0000000000 7000.0000000000 -6040.0000000000 0.0000000000 3500.0000000000 0.0000000000 0.0000000000 13000.0000000000 600.0000000000 0.0000000000 -2101.0000000000 3000.0000000000 0.0000000000 0.0000000000 0.0000000000 0.0000000000 4000.0000000000 2000.0000000000 -6500.0000000000 ]';
            testCase.verifyEqual(Q(:),testCaseQ,'AbsTol', 1e-10);            
        end
        
        function testLikelihood(testCase)
            testCase.verifyEqual(testCase.model.calcLogLikelihood([150,50000,13000,50,15000,10,6000,100000000,5000,100000000,6000,5000,100000000],testCase.data),-1.292099133776372e+06,'AbsTol', 1e-6);
            testCase.verifyEqual(testCase.model.calcLogLikelihood([1500,5000,13000,50,15000,10,6000,100000000,5000,100000000,6000,5000,100000000],testCase.data),-7.710726723240734e+04,'AbsTol', 1e-6)
            testCase.verifyEqual(testCase.model.calcLogLikelihood([1500,50000,1300,5,15000,10,6000,100000000,5000,100000000,6000,5000,100000000],testCase.data),-1.194292781031633e+06,'AbsTol', 1e-6)
            testCase.verifyEqual(testCase.model.calcLogLikelihood([1500,50000,13000,50,15000,10,600,100000000,500,10000000,6000,5000,100000000],testCase.data),-1.194356629933426e+06,'AbsTol', 1e-6)
        end
        
        function testCalcLogPosterior(testCase)
            testCase.verifyEqual(testCase.model.calcLogPosterior(testCase.params,testCase.data),-1.194500038126897e+06,'AbsTol', 1e-6)
        end
        
        function testCalcGradLogLikelihood(testCase)
            testCase.verifyEqual(testCase.model.calcGradLogLikelihood(testCase.params,testCase.data),[61.536469460224815;-23.721925225881694;0.000002049451030;-0.000608696687246;0.000000460189393;-0.000635199488632;0.011864684752889;-0.000000712210727;0.011859062754996;-0.000000593227600;-0.000000000073376;0.000000712484753;-0.000000000035627],'AbsTol', 1e-6)
        end
        
        function testCalcGradLogPosterior(testCase)
            testCase.verifyEqual(testCase.model.calcGradLogPosterior(testCase.params,testCase.data),[61.536469460224815;-23.721925225881694;0.000002049451030;-0.000608696687246;0.000000460189393;-0.000635199488632;0.011864684752889;-0.000000712210727;0.011859062754996;-0.000000593227600;-0.000000000073376;0.000000712484753;-0.000000000035627],'AbsTol', 1e-6)
        end
        
        function testCalcMetricTensor(testCase)
            mt = testCase.model.calcMetricTensor(testCase.params,testCase.data);
            testCase.verifyEqual(mt(:)',[ 0.0082397833288924,-0.0017897778810959,0.0000000001299951,0.0000000165601153,0.0000000000284044,0.0000000289193988,0.0000008955494680,-0.0000000000537722,0.0000008956242766,-0.0000000000448146,0.0000000000002919,0.0000000000539731,-0.0000000000000027,-0.0017897778810959,-0.0000640279944599,-0.0000000000198886,-0.0000000087448711,-0.0000000000044165,-0.0000000113338523,-0.0000002054121366,0.0000000000123367,-0.0000002054701707,0.0000000000102835,0.0000000000000034,-0.0000000000123587,0.0000000000000006,0.0000000001299951,-0.0000000000198886,0.0000000000683701,-0.0000000409902052,-0.0000000000000029,0.0000000000131812,0.0000000000000282,-0.0000000000000000,-0.0000000004098694,0.0000000000000205,0.0000000000000040,-0.0000000000000078,0.0000000000000000,0.0000000165601153,-0.0000000087448711,-0.0000000409902052,-0.0000000135975758,0.0000000000002126,-0.0000000339415510,0.0000000000075153,-0.0000000000000067,0.0000001217352061,-0.0000000000060947,0.0000000000014786,0.0000000000082966,0.0000000000000010,0.0000000000284044,-0.0000000000044165,-0.0000000000000029,0.0000000000002126,0.0000000000151460,-0.0000000460422867,-0.0000000000766791,0.0000000000000046,0.0000000000000403,0.0000000000000000,-0.0000000000000000,-0.0000000000000012,0.0000000000000000,0.0000000289193988,-0.0000000113338523,0.0000000000131812,-0.0000000339415510,-0.0000000460422867,0.0000001138058041,0.0000001054323728,-0.0000000000074245,-0.0000000001030764,0.0000000000000551,-0.0000000000611113,-0.0000000001695836,0.0000000000000012,0.0000008955494680,-0.0000002054121366,0.0000000000000282,0.0000000000075153,-0.0000000000766791,0.0000001054323728,0.0000000002214983,0.0000000001186884,0.0000000002213634,-0.0000000000000111,-0.0000000000000344,-0.0000000001187548,0.0000000000000059,-0.0000000000537722,0.0000000000123367,-0.0000000000000000,-0.0000000000000067,0.0000000000000046,-0.0000000000074245,0.0000000001186884,-0.0000000000000143,-0.0000000000000134,0.0000000000000000,0.0000000000000000,0.0000000000000072,-0.0000000000000000,0.0000008956242766,-0.0000002054701707,-0.0000000004098694,0.0000001217352061,0.0000000000000403,-0.0000000001030764,0.0000000002213634,-0.0000000000000134,0.0000000002216119,0.0000000001186345,0.0000000000000269,0.0000000000000008,0.0000000000000000,-0.0000000000448146,0.0000000000102835,0.0000000000000205,-0.0000000000060947,0.0000000000000000,0.0000000000000551,-0.0000000000000111,0.0000000000000000,0.0000000001186345,-0.0000000000000119,-0.0000000000000000,0.0000000000000000,-0.0000000000000000,0.0000000000002919,0.0000000000000034,0.0000000000000040,0.0000000000014786,-0.0000000000000000,-0.0000000000611113,-0.0000000000000344,0.0000000000000000,0.0000000000000269,-0.0000000000000000,0.0000000000008013,0.0000000000000076,0.0000000000000000,0.0000000000539731,-0.0000000000123587,-0.0000000000000078,0.0000000000082966,-0.0000000000000012,-0.0000000001695836,-0.0000000001187548,0.0000000000000072,0.0000000000000008,0.0000000000000000,0.0000000000000076,0.0000000000003011,0.0000000000000071,-0.0000000000000027,0.0000000000000006,0.0000000000000000,0.0000000000000010,0.0000000000000000,0.0000000000000012,0.0000000000000059,-0.0000000000000000,0.0000000000000000,-0.0000000000000000,0.0000000000000000,0.0000000000000071,-0.0000000000000000],'AbsTol', 1e-6)
        end
        
        function testCalcDerivMetricTensor(testCase)
            testCase.verifyEqual(testCase.model.calcDerivMetricTensor(testCase.params,testCase.data),zeros(13,13))
        end
        
        function testCalcDerivLogPrior(testCase)
            testCase.verifyEqual(testCase.model.calcDerivLogPrior(testCase.params),0)
            testCase.verifyEqual(testCase.model.calcDerivLogPrior([-1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1]),-Inf)
        end
        
        function testCalcLogPrior(testCase)
            testCase.verifyEqual(testCase.model.calcLogPrior(testCase.params),-2.072326582694611e+02,'AbsTol', 1e-6)
            testCase.verifyEqual(testCase.model.calcLogPrior(repmat(-1,1,13)),-Inf)
        end
        
        function testSamplePrior(testCase)
            rng(1)
            testCase.verifyEqual(testCase.model.samplePrior,1.0e+09 *[0.000417022010532;0.000720324496239;0.000000114384816;0.000302332579609;0.000146755899350;0.000092338603845;0.000186260219515;3.455607270437022;0.000396767480263;5.388167340038181;0.000419194520211;0.000685219503545;2.044522497323130],'AbsTol', 1e-6)
            rng('shuffle', 'twister')
        end
    end
    
    methods (TestMethodTeardown)
        function destroyExperiment(testCase)
            clear testCase.experiment
        end
    end    
    
end